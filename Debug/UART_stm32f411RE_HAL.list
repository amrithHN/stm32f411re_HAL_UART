
UART_stm32f411RE_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000334c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003644  08003644  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800364c  0800364c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  080036c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080036c4  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000891e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001672  00000000  00000000  000289be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0002a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015584  00000000  00000000  0002ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a6d  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e9a  00000000  00000000  00048d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdbd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f38  00000000  00000000  000cdc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034d4 	.word	0x080034d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080034d4 	.word	0x080034d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart2,rx_buf ,5);
 800058c:	2205      	movs	r2, #5
 800058e:	4904      	ldr	r1, [pc, #16]	; (80005a0 <HAL_UART_TxCpltCallback+0x1c>)
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <HAL_UART_TxCpltCallback+0x20>)
 8000592:	f001 fb4f 	bl	8001c34 <HAL_UART_Receive_IT>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000d0 	.word	0x200000d0
 80005a4:	2000008c 	.word	0x2000008c

080005a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

	uint16_t number = atoi(rx_buf);
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <HAL_UART_RxCpltCallback+0x3c>)
 80005b2:	f002 fa5f 	bl	8002a74 <atoi>
 80005b6:	4603      	mov	r3, r0
 80005b8:	81fb      	strh	r3, [r7, #14]
	number+=5; //add 5 and return
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	3305      	adds	r3, #5
 80005be:	81fb      	strh	r3, [r7, #14]
	char temp[5];
	sprintf(temp,"%d",number);
 80005c0:	89fa      	ldrh	r2, [r7, #14]
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	4908      	ldr	r1, [pc, #32]	; (80005e8 <HAL_UART_RxCpltCallback+0x40>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fa89 	bl	8002ae0 <siprintf>
	HAL_UART_Transmit_IT(&huart2,temp, 5);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2205      	movs	r2, #5
 80005d4:	4619      	mov	r1, r3
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_UART_RxCpltCallback+0x44>)
 80005d8:	f001 fae7 	bl	8001baa <HAL_UART_Transmit_IT>

}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	080034ec 	.word	0x080034ec
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fa3f 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f817 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8a9 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f87d 	bl	8000700 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char message[]="hello\r\n";
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <main+0x30>)
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
  unsigned char buffer[15];

  HAL_UART_Receive_IT(&huart2,rx_buf,5);
 8000614:	2205      	movs	r2, #5
 8000616:	4903      	ldr	r1, [pc, #12]	; (8000624 <main+0x34>)
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <main+0x38>)
 800061a:	f001 fb0b 	bl	8001c34 <HAL_UART_Receive_IT>
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x2e>
 8000620:	080034f0 	.word	0x080034f0
 8000624:	200000d0 	.word	0x200000d0
 8000628:	2000008c 	.word	0x2000008c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fa48 	bl	8002ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fd94 	bl	80011e0 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 f8b7 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fff6 	bl	80016d0 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f8a1 	bl	8000830 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 f9ea 	bl	8001b10 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f875 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a2c      	ldr	r2, [pc, #176]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <MX_GPIO_Init+0xd4>)
 80007e0:	f000 fce4 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_GPIO_Init+0xd8>)
 80007fc:	f000 fb52 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000800:	2320      	movs	r3, #32
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0xd4>)
 8000818:	f000 fb44 	bl	8000ea4 <HAL_GPIO_Init>

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020800 	.word	0x40020800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087a:	2007      	movs	r0, #7
 800087c:	f000 fa3e 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <HAL_UART_MspInit+0x94>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d133      	bne.n	8000916 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a14      	ldr	r2, [pc, #80]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_UART_MspInit+0x98>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e6:	230c      	movs	r3, #12
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <HAL_UART_MspInit+0x9c>)
 8000902:	f000 facf 	bl	8000ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2026      	movs	r0, #38	; 0x26
 800090c:	f000 fa01 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000910:	2026      	movs	r0, #38	; 0x26
 8000912:	f000 fa1a 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f8d0 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <USART2_IRQHandler+0x10>)
 8000986:	f001 f985 	bl	8001c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000008c 	.word	0x2000008c

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 f85a 	bl	8002a7c <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20020000 	.word	0x20020000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	200000d8 	.word	0x200000d8
 80009fc:	200000f0 	.word	0x200000f0

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 f819 	bl	8002a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fdcb 	bl	80005f0 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a68:	08003654 	.word	0x08003654
  ldr r2, =_sbss
 8000a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a70:	200000f0 	.word	0x200000f0

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f92b 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fec6 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f943 	bl	8000d66 <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90b 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	200000dc 	.word	0x200000dc

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200000dc 	.word	0x200000dc

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff3e 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff31 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff feda 	bl	8000b44 <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d008      	beq.n	8000db0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e052      	b.n	8000e56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0216 	bic.w	r2, r2, #22
 8000dbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <HAL_DMA_Abort+0x62>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d007      	beq.n	8000df0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0208 	bic.w	r2, r2, #8
 8000dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e00:	e013      	b.n	8000e2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e02:	f7ff fe9f 	bl	8000b44 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d90c      	bls.n	8000e2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e015      	b.n	8000e56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e4      	bne.n	8000e02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	223f      	movs	r2, #63	; 0x3f
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d004      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e00c      	b.n	8000e96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2205      	movs	r2, #5
 8000e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e159      	b.n	8001174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 8148 	bne.w	800116e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d005      	beq.n	8000ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d130      	bne.n	8000f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 0201 	and.w	r2, r3, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d017      	beq.n	8000f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d123      	bne.n	8000fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0203 	and.w	r2, r3, #3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a2 	beq.w	800116e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b57      	ldr	r3, [pc, #348]	; (800118c <HAL_GPIO_Init+0x2e8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a56      	ldr	r2, [pc, #344]	; (800118c <HAL_GPIO_Init+0x2e8>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b54      	ldr	r3, [pc, #336]	; (800118c <HAL_GPIO_Init+0x2e8>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001046:	4a52      	ldr	r2, [pc, #328]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a49      	ldr	r2, [pc, #292]	; (8001194 <HAL_GPIO_Init+0x2f0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x202>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_GPIO_Init+0x2f4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x1fe>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_GPIO_Init+0x2f8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x1fa>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_GPIO_Init+0x2fc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x1f6>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a45      	ldr	r2, [pc, #276]	; (80011a4 <HAL_GPIO_Init+0x300>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x1f2>
 8001092:	2304      	movs	r3, #4
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 8001096:	2307      	movs	r3, #7
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x204>
 80010a6:	2300      	movs	r3, #0
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_GPIO_Init+0x2ec>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_GPIO_Init+0x304>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_GPIO_Init+0x304>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_GPIO_Init+0x304>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_GPIO_Init+0x304>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001168:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_GPIO_Init+0x304>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f67f aea2 	bls.w	8000ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013800 	.word	0x40013800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40013c00 	.word	0x40013c00

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e267      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d075      	beq.n	80012ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fe:	4b88      	ldr	r3, [pc, #544]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b04      	cmp	r3, #4
 8001208:	d00c      	beq.n	8001224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b85      	ldr	r3, [pc, #532]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d112      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001216:	4b82      	ldr	r3, [pc, #520]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001222:	d10b      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	4b7e      	ldr	r3, [pc, #504]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05b      	beq.n	80012e8 <HAL_RCC_OscConfig+0x108>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d157      	bne.n	80012e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e242      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d106      	bne.n	8001254 <HAL_RCC_OscConfig+0x74>
 8001246:	4b76      	ldr	r3, [pc, #472]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a75      	ldr	r2, [pc, #468]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x98>
 800125e:	4b70      	ldr	r3, [pc, #448]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6f      	ldr	r2, [pc, #444]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6c      	ldr	r2, [pc, #432]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001278:	4b69      	ldr	r3, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a68      	ldr	r2, [pc, #416]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b66      	ldr	r3, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a65      	ldr	r2, [pc, #404]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc54 	bl	8000b44 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc50 	bl	8000b44 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e207      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xc0>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc40 	bl	8000b44 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc3c 	bl	8000b44 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1f3      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0xe8>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f6:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130e:	4b44      	ldr	r3, [pc, #272]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1c7      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e03a      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_RCC_OscConfig+0x244>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fbf5 	bl	8000b44 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fbf1 	bl	8000b44 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1a8      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4925      	ldr	r1, [pc, #148]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x244>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fbd4 	bl	8000b44 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbd0 	bl	8000b44 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e187      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d036      	beq.n	8001438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_RCC_OscConfig+0x248>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fbb4 	bl	8000b44 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fbb0 	bl	8000b44 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e167      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x200>
 80013fe:	e01b      	b.n	8001438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_OscConfig+0x248>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb9d 	bl	8000b44 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	e00e      	b.n	800142c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fb99 	bl	8000b44 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d907      	bls.n	800142c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e150      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
 8001420:	40023800 	.word	0x40023800
 8001424:	42470000 	.word	0x42470000
 8001428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ea      	bne.n	800140e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8097 	beq.w	8001574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a7c      	ldr	r2, [pc, #496]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb59 	bl	8000b44 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fb55 	bl	8000b44 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e10c      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x2ea>
 80014bc:	4b64      	ldr	r3, [pc, #400]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a63      	ldr	r2, [pc, #396]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x30c>
 80014d2:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d6:	4a5e      	ldr	r2, [pc, #376]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
 80014de:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	4a5b      	ldr	r2, [pc, #364]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	4a57      	ldr	r2, [pc, #348]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
 80014f8:	4b55      	ldr	r3, [pc, #340]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a54      	ldr	r2, [pc, #336]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d015      	beq.n	8001538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fb1a 	bl	8000b44 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fb16 	bl	8000b44 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0cb      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ee      	beq.n	8001514 <HAL_RCC_OscConfig+0x334>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff fb04 	bl	8000b44 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fb00 	bl	8000b44 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0b5      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ee      	bne.n	8001540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a1 	beq.w	80016c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d05c      	beq.n	8001644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d141      	bne.n	8001616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_RCC_OscConfig+0x478>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fad4 	bl	8000b44 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fad0 	bl	8000b44 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e087      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	491b      	ldr	r1, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x478>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff faa9 	bl	8000b44 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff faa5 	bl	8000b44 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e05c      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x416>
 8001614:	e054      	b.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_RCC_OscConfig+0x478>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fa92 	bl	8000b44 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fa8e 	bl	8000b44 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e045      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x444>
 8001642:	e03d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e038      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000
 8001658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x4ec>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d028      	beq.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d121      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d11a      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001694:	4293      	cmp	r3, r2
 8001696:	d111      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	3b01      	subs	r3, #1
 80016a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0cc      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d90c      	bls.n	800170c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b65      	ldr	r3, [pc, #404]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0b8      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001724:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a52      	ldr	r2, [pc, #328]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	494d      	ldr	r1, [pc, #308]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d044      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d119      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e07f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e067      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4934      	ldr	r1, [pc, #208]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff f9c0 	bl	8000b44 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff f9bc 	bl	8000b44 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e04f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20c      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e032      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4916      	ldr	r1, [pc, #88]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	490e      	ldr	r1, [pc, #56]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001856:	f000 f821 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800185a:	4602      	mov	r2, r0
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	490a      	ldr	r1, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	5ccb      	ldrb	r3, [r1, r3]
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f920 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00
 800188c:	40023800 	.word	0x40023800
 8001890:	080034f8 	.word	0x080034f8
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a0:	b094      	sub	sp, #80	; 0x50
 80018a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
 80018a8:	2300      	movs	r3, #0
 80018aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ac:	2300      	movs	r3, #0
 80018ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d00d      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x40>
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	f200 80e1 	bhi.w	8001a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ce:	e0db      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018d4:	e0db      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d6:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80018d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018da:	e0d8      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e6:	4b6d      	ldr	r3, [pc, #436]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d063      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	2200      	movs	r2, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80018fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
 800190a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800190e:	4622      	mov	r2, r4
 8001910:	462b      	mov	r3, r5
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4621      	mov	r1, r4
 8001928:	1a51      	subs	r1, r2, r1
 800192a:	6139      	str	r1, [r7, #16]
 800192c:	4629      	mov	r1, r5
 800192e:	eb63 0301 	sbc.w	r3, r3, r1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001940:	4659      	mov	r1, fp
 8001942:	018b      	lsls	r3, r1, #6
 8001944:	4651      	mov	r1, sl
 8001946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194a:	4651      	mov	r1, sl
 800194c:	018a      	lsls	r2, r1, #6
 800194e:	4651      	mov	r1, sl
 8001950:	ebb2 0801 	subs.w	r8, r2, r1
 8001954:	4659      	mov	r1, fp
 8001956:	eb63 0901 	sbc.w	r9, r3, r1
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800196a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800196e:	4690      	mov	r8, r2
 8001970:	4699      	mov	r9, r3
 8001972:	4623      	mov	r3, r4
 8001974:	eb18 0303 	adds.w	r3, r8, r3
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	462b      	mov	r3, r5
 800197c:	eb49 0303 	adc.w	r3, r9, r3
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800198e:	4629      	mov	r1, r5
 8001990:	024b      	lsls	r3, r1, #9
 8001992:	4621      	mov	r1, r4
 8001994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001998:	4621      	mov	r1, r4
 800199a:	024a      	lsls	r2, r1, #9
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a2:	2200      	movs	r2, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019ac:	f7fe fc68 	bl	8000280 <__aeabi_uldivmod>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4613      	mov	r3, r2
 80019b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b8:	e058      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	4611      	mov	r1, r2
 80019c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d4:	4642      	mov	r2, r8
 80019d6:	464b      	mov	r3, r9
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	0159      	lsls	r1, r3, #5
 80019e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e6:	0150      	lsls	r0, r2, #5
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4641      	mov	r1, r8
 80019ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80019f2:	4649      	mov	r1, r9
 80019f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a10:	eb63 050b 	sbc.w	r5, r3, fp
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	00eb      	lsls	r3, r5, #3
 8001a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a22:	00e2      	lsls	r2, r4, #3
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	4643      	mov	r3, r8
 8001a2a:	18e3      	adds	r3, r4, r3
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	464b      	mov	r3, r9
 8001a30:	eb45 0303 	adc.w	r3, r5, r3
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a42:	4629      	mov	r1, r5
 8001a44:	028b      	lsls	r3, r1, #10
 8001a46:	4621      	mov	r1, r4
 8001a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	028a      	lsls	r2, r1, #10
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a56:	2200      	movs	r2, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	61fa      	str	r2, [r7, #28]
 8001a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a60:	f7fe fc0e 	bl	8000280 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	3301      	adds	r3, #1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a86:	e002      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3750      	adds	r7, #80	; 0x50
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	00f42400 	.word	0x00f42400
 8001aa4:	007a1200 	.word	0x007a1200

08001aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08003508 	.word	0x08003508

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffdc 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08003508 	.word	0x08003508

08001b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e03f      	b.n	8001ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fea8 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2224      	movs	r2, #36	; 0x24
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fd19 	bl	800258c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d130      	bne.n	8001c26 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_UART_Transmit_IT+0x26>
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e029      	b.n	8001c28 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_UART_Transmit_IT+0x38>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e022      	b.n	8001c28 <HAL_UART_Transmit_IT+0x7e>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2221      	movs	r2, #33	; 0x21
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d11d      	bne.n	8001c8a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_UART_Receive_IT+0x26>
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e016      	b.n	8001c8c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_UART_Receive_IT+0x38>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e00f      	b.n	8001c8c <HAL_UART_Receive_IT+0x58>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 faab 	bl	80021dc <UART_Start_Receive_IT>
 8001c86:	4603      	mov	r3, r0
 8001c88:	e000      	b.n	8001c8c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0ba      	sub	sp, #232	; 0xe8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_UART_IRQHandler+0x66>
 8001ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fb8f 	bl	8002416 <UART_Receive_IT>
      return;
 8001cf8:	e256      	b.n	80021a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80de 	beq.w	8001ec0 <HAL_UART_IRQHandler+0x22c>
 8001d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d106      	bne.n	8001d1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80d1 	beq.w	8001ec0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_UART_IRQHandler+0xae>
 8001d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_UART_IRQHandler+0xd2>
 8001d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_UART_IRQHandler+0xf6>
 8001d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d011      	beq.n	8001dba <HAL_UART_IRQHandler+0x126>
 8001d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f043 0208 	orr.w	r2, r3, #8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 81ed 	beq.w	800219e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_UART_IRQHandler+0x14e>
 8001dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fb1a 	bl	8002416 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_UART_IRQHandler+0x17a>
 8001e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d04f      	beq.n	8001eae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fa22 	bl	8002258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d141      	bne.n	8001ea6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3314      	adds	r3, #20
 8001e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e30:	e853 3f00 	ldrex	r3, [r3]
 8001e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3314      	adds	r3, #20
 8001e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e5e:	e841 2300 	strex	r3, r2, [r1]
 8001e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1d9      	bne.n	8001e22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d013      	beq.n	8001e9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	4a7d      	ldr	r2, [pc, #500]	; (8002070 <HAL_UART_IRQHandler+0x3dc>)
 8001e7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe ffeb 	bl	8000e5e <HAL_DMA_Abort_IT>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e9c:	e00e      	b.n	8001ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f986 	bl	80021b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea4:	e00a      	b.n	8001ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f982 	bl	80021b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eac:	e006      	b.n	8001ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f97e 	bl	80021b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001eba:	e170      	b.n	800219e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ebc:	bf00      	nop
    return;
 8001ebe:	e16e      	b.n	800219e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f040 814a 	bne.w	800215e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8143 	beq.w	800215e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 813c 	beq.w	800215e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	f040 80b4 	bne.w	8002074 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8140 	beq.w	80021a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	f080 8139 	bcs.w	80021a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f42:	f000 8088 	beq.w	8002056 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f54:	e853 3f00 	ldrex	r3, [r3]
 8001f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f82:	e841 2300 	strex	r3, r2, [r1]
 8001f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1d9      	bne.n	8001f46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3314      	adds	r3, #20
 8001f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3314      	adds	r3, #20
 8001fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001fba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fc2:	e841 2300 	strex	r3, r2, [r1]
 8001fc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e1      	bne.n	8001f92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd8:	e853 3f00 	ldrex	r3, [r3]
 8001fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3314      	adds	r3, #20
 8001fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ffa:	e841 2300 	strex	r3, r2, [r1]
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e3      	bne.n	8001fce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	330c      	adds	r3, #12
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201e:	e853 3f00 	ldrex	r3, [r3]
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002026:	f023 0310 	bic.w	r3, r3, #16
 800202a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	330c      	adds	r3, #12
 8002034:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002038:	65ba      	str	r2, [r7, #88]	; 0x58
 800203a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800203e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002040:	e841 2300 	strex	r3, r2, [r1]
 8002044:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e3      	bne.n	8002014 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe94 	bl	8000d7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800205e:	b29b      	uxth	r3, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b29b      	uxth	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8ac 	bl	80021c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800206c:	e099      	b.n	80021a2 <HAL_UART_IRQHandler+0x50e>
 800206e:	bf00      	nop
 8002070:	0800231f 	.word	0x0800231f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800207c:	b29b      	uxth	r3, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 808b 	beq.w	80021a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 8086 	beq.w	80021a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	330c      	adds	r3, #12
 80020a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a4:	e853 3f00 	ldrex	r3, [r3]
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	330c      	adds	r3, #12
 80020ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80020be:	647a      	str	r2, [r7, #68]	; 0x44
 80020c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e3      	bne.n	800209a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3314      	adds	r3, #20
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	623b      	str	r3, [r7, #32]
   return(result);
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3314      	adds	r3, #20
 80020f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80020f6:	633a      	str	r2, [r7, #48]	; 0x30
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fe:	e841 2300 	strex	r3, r2, [r1]
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1e3      	bne.n	80020d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	330c      	adds	r3, #12
 800211e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	e853 3f00 	ldrex	r3, [r3]
 8002126:	60fb      	str	r3, [r7, #12]
   return(result);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0310 	bic.w	r3, r3, #16
 800212e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	330c      	adds	r3, #12
 8002138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800213c:	61fa      	str	r2, [r7, #28]
 800213e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	e841 2300 	strex	r3, r2, [r1]
 8002148:	617b      	str	r3, [r7, #20]
   return(result);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e3      	bne.n	8002118 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f834 	bl	80021c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800215c:	e023      	b.n	80021a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_UART_IRQHandler+0x4ea>
 800216a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8e5 	bl	8002346 <UART_Transmit_IT>
    return;
 800217c:	e014      	b.n	80021a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800217e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <HAL_UART_IRQHandler+0x514>
 800218a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f925 	bl	80023e6 <UART_EndTransmit_IT>
    return;
 800219c:	e004      	b.n	80021a8 <HAL_UART_IRQHandler+0x514>
    return;
 800219e:	bf00      	nop
 80021a0:	e002      	b.n	80021a8 <HAL_UART_IRQHandler+0x514>
      return;
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <HAL_UART_IRQHandler+0x514>
      return;
 80021a6:	bf00      	nop
  }
}
 80021a8:	37e8      	adds	r7, #232	; 0xe8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop

080021b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2222      	movs	r2, #34	; 0x22
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002228:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002258:	b480      	push	{r7}
 800225a:	b095      	sub	sp, #84	; 0x54
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	330c      	adds	r3, #12
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226a:	e853 3f00 	ldrex	r3, [r3]
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	330c      	adds	r3, #12
 800227e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002280:	643a      	str	r2, [r7, #64]	; 0x40
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002288:	e841 2300 	strex	r3, r2, [r1]
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e5      	bne.n	8002260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3314      	adds	r3, #20
 800229a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3314      	adds	r3, #20
 80022b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e5      	bne.n	8002294 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d119      	bne.n	8002304 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	e853 3f00 	ldrex	r3, [r3]
 80022de:	60bb      	str	r3, [r7, #8]
   return(result);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f023 0310 	bic.w	r3, r3, #16
 80022e6:	647b      	str	r3, [r7, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	330c      	adds	r3, #12
 80022ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022f0:	61ba      	str	r2, [r7, #24]
 80022f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f4:	6979      	ldr	r1, [r7, #20]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	e841 2300 	strex	r3, r2, [r1]
 80022fc:	613b      	str	r3, [r7, #16]
   return(result);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e5      	bne.n	80022d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002312:	bf00      	nop
 8002314:	3754      	adds	r7, #84	; 0x54
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff ff39 	bl	80021b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b21      	cmp	r3, #33	; 0x21
 8002358:	d13e      	bne.n	80023d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002362:	d114      	bne.n	800238e <UART_Transmit_IT+0x48>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d110      	bne.n	800238e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002380:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	1c9a      	adds	r2, r3, #2
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	621a      	str	r2, [r3, #32]
 800238c:	e008      	b.n	80023a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6211      	str	r1, [r2, #32]
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4619      	mov	r1, r3
 80023ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe f8bc 	bl	8000584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b08c      	sub	sp, #48	; 0x30
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b22      	cmp	r3, #34	; 0x22
 8002428:	f040 80ab 	bne.w	8002582 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002434:	d117      	bne.n	8002466 <UART_Receive_IT+0x50>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d113      	bne.n	8002466 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800243e:	2300      	movs	r3, #0
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002454:	b29a      	uxth	r2, r3
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	1c9a      	adds	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
 8002464:	e026      	b.n	80024b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002478:	d007      	beq.n	800248a <UART_Receive_IT+0x74>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <UART_Receive_IT+0x82>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e008      	b.n	80024aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29b      	uxth	r3, r3
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4619      	mov	r1, r3
 80024c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d15a      	bne.n	800257e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0220 	bic.w	r2, r2, #32
 80024d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	2b01      	cmp	r3, #1
 8002506:	d135      	bne.n	8002574 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	613b      	str	r3, [r7, #16]
   return(result);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f023 0310 	bic.w	r3, r3, #16
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	330c      	adds	r3, #12
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	623a      	str	r2, [r7, #32]
 8002530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002532:	69f9      	ldr	r1, [r7, #28]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	e841 2300 	strex	r3, r2, [r1]
 800253a:	61bb      	str	r3, [r7, #24]
   return(result);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e5      	bne.n	800250e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b10      	cmp	r3, #16
 800254e:	d10a      	bne.n	8002566 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800256a:	4619      	mov	r1, r3
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fe29 	bl	80021c4 <HAL_UARTEx_RxEventCallback>
 8002572:	e002      	b.n	800257a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe f817 	bl	80005a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e002      	b.n	8002584 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3730      	adds	r7, #48	; 0x30
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800258c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002590:	b0c0      	sub	sp, #256	; 0x100
 8002592:	af00      	add	r7, sp, #0
 8002594:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	68d9      	ldr	r1, [r3, #12]
 80025aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	ea40 0301 	orr.w	r3, r0, r1
 80025b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025e4:	f021 010c 	bic.w	r1, r1, #12
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025f2:	430b      	orrs	r3, r1
 80025f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002606:	6999      	ldr	r1, [r3, #24]
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	ea40 0301 	orr.w	r3, r0, r1
 8002612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b8f      	ldr	r3, [pc, #572]	; (8002858 <UART_SetConfig+0x2cc>)
 800261c:	429a      	cmp	r2, r3
 800261e:	d005      	beq.n	800262c <UART_SetConfig+0xa0>
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b8d      	ldr	r3, [pc, #564]	; (800285c <UART_SetConfig+0x2d0>)
 8002628:	429a      	cmp	r2, r3
 800262a:	d104      	bne.n	8002636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800262c:	f7ff fa5c 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8002630:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002634:	e003      	b.n	800263e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002636:	f7ff fa43 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 800263a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002648:	f040 810c 	bne.w	8002864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800264c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002650:	2200      	movs	r2, #0
 8002652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002656:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800265a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800265e:	4622      	mov	r2, r4
 8002660:	462b      	mov	r3, r5
 8002662:	1891      	adds	r1, r2, r2
 8002664:	65b9      	str	r1, [r7, #88]	; 0x58
 8002666:	415b      	adcs	r3, r3
 8002668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800266a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800266e:	4621      	mov	r1, r4
 8002670:	eb12 0801 	adds.w	r8, r2, r1
 8002674:	4629      	mov	r1, r5
 8002676:	eb43 0901 	adc.w	r9, r3, r1
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800268a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800268e:	4690      	mov	r8, r2
 8002690:	4699      	mov	r9, r3
 8002692:	4623      	mov	r3, r4
 8002694:	eb18 0303 	adds.w	r3, r8, r3
 8002698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800269c:	462b      	mov	r3, r5
 800269e:	eb49 0303 	adc.w	r3, r9, r3
 80026a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026ba:	460b      	mov	r3, r1
 80026bc:	18db      	adds	r3, r3, r3
 80026be:	653b      	str	r3, [r7, #80]	; 0x50
 80026c0:	4613      	mov	r3, r2
 80026c2:	eb42 0303 	adc.w	r3, r2, r3
 80026c6:	657b      	str	r3, [r7, #84]	; 0x54
 80026c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026d0:	f7fd fdd6 	bl	8000280 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4b61      	ldr	r3, [pc, #388]	; (8002860 <UART_SetConfig+0x2d4>)
 80026da:	fba3 2302 	umull	r2, r3, r3, r2
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	011c      	lsls	r4, r3, #4
 80026e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	1891      	adds	r1, r2, r2
 80026fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80026fc:	415b      	adcs	r3, r3
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002704:	4641      	mov	r1, r8
 8002706:	eb12 0a01 	adds.w	sl, r2, r1
 800270a:	4649      	mov	r1, r9
 800270c:	eb43 0b01 	adc.w	fp, r3, r1
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800271c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002724:	4692      	mov	sl, r2
 8002726:	469b      	mov	fp, r3
 8002728:	4643      	mov	r3, r8
 800272a:	eb1a 0303 	adds.w	r3, sl, r3
 800272e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002732:	464b      	mov	r3, r9
 8002734:	eb4b 0303 	adc.w	r3, fp, r3
 8002738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002748:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800274c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002750:	460b      	mov	r3, r1
 8002752:	18db      	adds	r3, r3, r3
 8002754:	643b      	str	r3, [r7, #64]	; 0x40
 8002756:	4613      	mov	r3, r2
 8002758:	eb42 0303 	adc.w	r3, r2, r3
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
 800275e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002766:	f7fd fd8b 	bl	8000280 <__aeabi_uldivmod>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4611      	mov	r1, r2
 8002770:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <UART_SetConfig+0x2d4>)
 8002772:	fba3 2301 	umull	r2, r3, r3, r1
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2264      	movs	r2, #100	; 0x64
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	1acb      	subs	r3, r1, r3
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002786:	4b36      	ldr	r3, [pc, #216]	; (8002860 <UART_SetConfig+0x2d4>)
 8002788:	fba3 2302 	umull	r2, r3, r3, r2
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002794:	441c      	add	r4, r3
 8002796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279a:	2200      	movs	r2, #0
 800279c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027a8:	4642      	mov	r2, r8
 80027aa:	464b      	mov	r3, r9
 80027ac:	1891      	adds	r1, r2, r2
 80027ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80027b0:	415b      	adcs	r3, r3
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027b8:	4641      	mov	r1, r8
 80027ba:	1851      	adds	r1, r2, r1
 80027bc:	6339      	str	r1, [r7, #48]	; 0x30
 80027be:	4649      	mov	r1, r9
 80027c0:	414b      	adcs	r3, r1
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027d0:	4659      	mov	r1, fp
 80027d2:	00cb      	lsls	r3, r1, #3
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027da:	4651      	mov	r1, sl
 80027dc:	00ca      	lsls	r2, r1, #3
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	4642      	mov	r2, r8
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027ec:	464b      	mov	r3, r9
 80027ee:	460a      	mov	r2, r1
 80027f0:	eb42 0303 	adc.w	r3, r2, r3
 80027f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002804:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800280c:	460b      	mov	r3, r1
 800280e:	18db      	adds	r3, r3, r3
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	4613      	mov	r3, r2
 8002814:	eb42 0303 	adc.w	r3, r2, r3
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800281e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002822:	f7fd fd2d 	bl	8000280 <__aeabi_uldivmod>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <UART_SetConfig+0x2d4>)
 800282c:	fba3 1302 	umull	r1, r3, r3, r2
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	2164      	movs	r1, #100	; 0x64
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	3332      	adds	r3, #50	; 0x32
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <UART_SetConfig+0x2d4>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	f003 0207 	and.w	r2, r3, #7
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4422      	add	r2, r4
 8002852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002854:	e105      	b.n	8002a62 <UART_SetConfig+0x4d6>
 8002856:	bf00      	nop
 8002858:	40011000 	.word	0x40011000
 800285c:	40011400 	.word	0x40011400
 8002860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002868:	2200      	movs	r2, #0
 800286a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800286e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002876:	4642      	mov	r2, r8
 8002878:	464b      	mov	r3, r9
 800287a:	1891      	adds	r1, r2, r2
 800287c:	6239      	str	r1, [r7, #32]
 800287e:	415b      	adcs	r3, r3
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
 8002882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002886:	4641      	mov	r1, r8
 8002888:	1854      	adds	r4, r2, r1
 800288a:	4649      	mov	r1, r9
 800288c:	eb43 0501 	adc.w	r5, r3, r1
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	00eb      	lsls	r3, r5, #3
 800289a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800289e:	00e2      	lsls	r2, r4, #3
 80028a0:	4614      	mov	r4, r2
 80028a2:	461d      	mov	r5, r3
 80028a4:	4643      	mov	r3, r8
 80028a6:	18e3      	adds	r3, r4, r3
 80028a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028ac:	464b      	mov	r3, r9
 80028ae:	eb45 0303 	adc.w	r3, r5, r3
 80028b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028d2:	4629      	mov	r1, r5
 80028d4:	008b      	lsls	r3, r1, #2
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028dc:	4621      	mov	r1, r4
 80028de:	008a      	lsls	r2, r1, #2
 80028e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028e4:	f7fd fccc 	bl	8000280 <__aeabi_uldivmod>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <UART_SetConfig+0x4e4>)
 80028ee:	fba3 2302 	umull	r2, r3, r3, r2
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	011c      	lsls	r4, r3, #4
 80028f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002908:	4642      	mov	r2, r8
 800290a:	464b      	mov	r3, r9
 800290c:	1891      	adds	r1, r2, r2
 800290e:	61b9      	str	r1, [r7, #24]
 8002910:	415b      	adcs	r3, r3
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002918:	4641      	mov	r1, r8
 800291a:	1851      	adds	r1, r2, r1
 800291c:	6139      	str	r1, [r7, #16]
 800291e:	4649      	mov	r1, r9
 8002920:	414b      	adcs	r3, r1
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002930:	4659      	mov	r1, fp
 8002932:	00cb      	lsls	r3, r1, #3
 8002934:	4651      	mov	r1, sl
 8002936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293a:	4651      	mov	r1, sl
 800293c:	00ca      	lsls	r2, r1, #3
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	4603      	mov	r3, r0
 8002944:	4642      	mov	r2, r8
 8002946:	189b      	adds	r3, r3, r2
 8002948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800294c:	464b      	mov	r3, r9
 800294e:	460a      	mov	r2, r1
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	67bb      	str	r3, [r7, #120]	; 0x78
 8002962:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002970:	4649      	mov	r1, r9
 8002972:	008b      	lsls	r3, r1, #2
 8002974:	4641      	mov	r1, r8
 8002976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800297a:	4641      	mov	r1, r8
 800297c:	008a      	lsls	r2, r1, #2
 800297e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002982:	f7fd fc7d 	bl	8000280 <__aeabi_uldivmod>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <UART_SetConfig+0x4e4>)
 800298c:	fba3 1302 	umull	r1, r3, r3, r2
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	2164      	movs	r1, #100	; 0x64
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	3332      	adds	r3, #50	; 0x32
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <UART_SetConfig+0x4e4>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029aa:	441c      	add	r4, r3
 80029ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029b0:	2200      	movs	r2, #0
 80029b2:	673b      	str	r3, [r7, #112]	; 0x70
 80029b4:	677a      	str	r2, [r7, #116]	; 0x74
 80029b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029ba:	4642      	mov	r2, r8
 80029bc:	464b      	mov	r3, r9
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ca:	4641      	mov	r1, r8
 80029cc:	1851      	adds	r1, r2, r1
 80029ce:	6039      	str	r1, [r7, #0]
 80029d0:	4649      	mov	r1, r9
 80029d2:	414b      	adcs	r3, r1
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029e2:	4659      	mov	r1, fp
 80029e4:	00cb      	lsls	r3, r1, #3
 80029e6:	4651      	mov	r1, sl
 80029e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ec:	4651      	mov	r1, sl
 80029ee:	00ca      	lsls	r2, r1, #3
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	4603      	mov	r3, r0
 80029f6:	4642      	mov	r2, r8
 80029f8:	189b      	adds	r3, r3, r2
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80029fc:	464b      	mov	r3, r9
 80029fe:	460a      	mov	r2, r1
 8002a00:	eb42 0303 	adc.w	r3, r2, r3
 8002a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a10:	667a      	str	r2, [r7, #100]	; 0x64
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a1e:	4649      	mov	r1, r9
 8002a20:	008b      	lsls	r3, r1, #2
 8002a22:	4641      	mov	r1, r8
 8002a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a28:	4641      	mov	r1, r8
 8002a2a:	008a      	lsls	r2, r1, #2
 8002a2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a30:	f7fd fc26 	bl	8000280 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <UART_SetConfig+0x4e4>)
 8002a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2164      	movs	r1, #100	; 0x64
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	3332      	adds	r3, #50	; 0x32
 8002a4c:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <UART_SetConfig+0x4e4>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4422      	add	r2, r4
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	bf00      	nop
 8002a64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6e:	bf00      	nop
 8002a70:	51eb851f 	.word	0x51eb851f

08002a74 <atoi>:
 8002a74:	220a      	movs	r2, #10
 8002a76:	2100      	movs	r1, #0
 8002a78:	f000 b8d4 	b.w	8002c24 <strtol>

08002a7c <__errno>:
 8002a7c:	4b01      	ldr	r3, [pc, #4]	; (8002a84 <__errno+0x8>)
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	2000000c 	.word	0x2000000c

08002a88 <__libc_init_array>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	4d0d      	ldr	r5, [pc, #52]	; (8002ac0 <__libc_init_array+0x38>)
 8002a8c:	4c0d      	ldr	r4, [pc, #52]	; (8002ac4 <__libc_init_array+0x3c>)
 8002a8e:	1b64      	subs	r4, r4, r5
 8002a90:	10a4      	asrs	r4, r4, #2
 8002a92:	2600      	movs	r6, #0
 8002a94:	42a6      	cmp	r6, r4
 8002a96:	d109      	bne.n	8002aac <__libc_init_array+0x24>
 8002a98:	4d0b      	ldr	r5, [pc, #44]	; (8002ac8 <__libc_init_array+0x40>)
 8002a9a:	4c0c      	ldr	r4, [pc, #48]	; (8002acc <__libc_init_array+0x44>)
 8002a9c:	f000 fd1a 	bl	80034d4 <_init>
 8002aa0:	1b64      	subs	r4, r4, r5
 8002aa2:	10a4      	asrs	r4, r4, #2
 8002aa4:	2600      	movs	r6, #0
 8002aa6:	42a6      	cmp	r6, r4
 8002aa8:	d105      	bne.n	8002ab6 <__libc_init_array+0x2e>
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab0:	4798      	blx	r3
 8002ab2:	3601      	adds	r6, #1
 8002ab4:	e7ee      	b.n	8002a94 <__libc_init_array+0xc>
 8002ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aba:	4798      	blx	r3
 8002abc:	3601      	adds	r6, #1
 8002abe:	e7f2      	b.n	8002aa6 <__libc_init_array+0x1e>
 8002ac0:	0800364c 	.word	0x0800364c
 8002ac4:	0800364c 	.word	0x0800364c
 8002ac8:	0800364c 	.word	0x0800364c
 8002acc:	08003650 	.word	0x08003650

08002ad0 <memset>:
 8002ad0:	4402      	add	r2, r0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d100      	bne.n	8002ada <memset+0xa>
 8002ad8:	4770      	bx	lr
 8002ada:	f803 1b01 	strb.w	r1, [r3], #1
 8002ade:	e7f9      	b.n	8002ad4 <memset+0x4>

08002ae0 <siprintf>:
 8002ae0:	b40e      	push	{r1, r2, r3}
 8002ae2:	b500      	push	{lr}
 8002ae4:	b09c      	sub	sp, #112	; 0x70
 8002ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ae8:	9002      	str	r0, [sp, #8]
 8002aea:	9006      	str	r0, [sp, #24]
 8002aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <siprintf+0x38>)
 8002af2:	9107      	str	r1, [sp, #28]
 8002af4:	9104      	str	r1, [sp, #16]
 8002af6:	4909      	ldr	r1, [pc, #36]	; (8002b1c <siprintf+0x3c>)
 8002af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002afc:	9105      	str	r1, [sp, #20]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	a902      	add	r1, sp, #8
 8002b04:	f000 f8f4 	bl	8002cf0 <_svfiprintf_r>
 8002b08:	9b02      	ldr	r3, [sp, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	b01c      	add	sp, #112	; 0x70
 8002b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b14:	b003      	add	sp, #12
 8002b16:	4770      	bx	lr
 8002b18:	2000000c 	.word	0x2000000c
 8002b1c:	ffff0208 	.word	0xffff0208

08002b20 <_strtol_l.constprop.0>:
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b26:	d001      	beq.n	8002b2c <_strtol_l.constprop.0+0xc>
 8002b28:	2b24      	cmp	r3, #36	; 0x24
 8002b2a:	d906      	bls.n	8002b3a <_strtol_l.constprop.0+0x1a>
 8002b2c:	f7ff ffa6 	bl	8002a7c <__errno>
 8002b30:	2316      	movs	r3, #22
 8002b32:	6003      	str	r3, [r0, #0]
 8002b34:	2000      	movs	r0, #0
 8002b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002c20 <_strtol_l.constprop.0+0x100>
 8002b3e:	460d      	mov	r5, r1
 8002b40:	462e      	mov	r6, r5
 8002b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002b46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8002b4a:	f017 0708 	ands.w	r7, r7, #8
 8002b4e:	d1f7      	bne.n	8002b40 <_strtol_l.constprop.0+0x20>
 8002b50:	2c2d      	cmp	r4, #45	; 0x2d
 8002b52:	d132      	bne.n	8002bba <_strtol_l.constprop.0+0x9a>
 8002b54:	782c      	ldrb	r4, [r5, #0]
 8002b56:	2701      	movs	r7, #1
 8002b58:	1cb5      	adds	r5, r6, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d05b      	beq.n	8002c16 <_strtol_l.constprop.0+0xf6>
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d109      	bne.n	8002b76 <_strtol_l.constprop.0+0x56>
 8002b62:	2c30      	cmp	r4, #48	; 0x30
 8002b64:	d107      	bne.n	8002b76 <_strtol_l.constprop.0+0x56>
 8002b66:	782c      	ldrb	r4, [r5, #0]
 8002b68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002b6c:	2c58      	cmp	r4, #88	; 0x58
 8002b6e:	d14d      	bne.n	8002c0c <_strtol_l.constprop.0+0xec>
 8002b70:	786c      	ldrb	r4, [r5, #1]
 8002b72:	2310      	movs	r3, #16
 8002b74:	3502      	adds	r5, #2
 8002b76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8002b7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8002b7e:	f04f 0c00 	mov.w	ip, #0
 8002b82:	fbb8 f9f3 	udiv	r9, r8, r3
 8002b86:	4666      	mov	r6, ip
 8002b88:	fb03 8a19 	mls	sl, r3, r9, r8
 8002b8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8002b90:	f1be 0f09 	cmp.w	lr, #9
 8002b94:	d816      	bhi.n	8002bc4 <_strtol_l.constprop.0+0xa4>
 8002b96:	4674      	mov	r4, lr
 8002b98:	42a3      	cmp	r3, r4
 8002b9a:	dd24      	ble.n	8002be6 <_strtol_l.constprop.0+0xc6>
 8002b9c:	f1bc 0f00 	cmp.w	ip, #0
 8002ba0:	db1e      	blt.n	8002be0 <_strtol_l.constprop.0+0xc0>
 8002ba2:	45b1      	cmp	r9, r6
 8002ba4:	d31c      	bcc.n	8002be0 <_strtol_l.constprop.0+0xc0>
 8002ba6:	d101      	bne.n	8002bac <_strtol_l.constprop.0+0x8c>
 8002ba8:	45a2      	cmp	sl, r4
 8002baa:	db19      	blt.n	8002be0 <_strtol_l.constprop.0+0xc0>
 8002bac:	fb06 4603 	mla	r6, r6, r3, r4
 8002bb0:	f04f 0c01 	mov.w	ip, #1
 8002bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002bb8:	e7e8      	b.n	8002b8c <_strtol_l.constprop.0+0x6c>
 8002bba:	2c2b      	cmp	r4, #43	; 0x2b
 8002bbc:	bf04      	itt	eq
 8002bbe:	782c      	ldrbeq	r4, [r5, #0]
 8002bc0:	1cb5      	addeq	r5, r6, #2
 8002bc2:	e7ca      	b.n	8002b5a <_strtol_l.constprop.0+0x3a>
 8002bc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8002bc8:	f1be 0f19 	cmp.w	lr, #25
 8002bcc:	d801      	bhi.n	8002bd2 <_strtol_l.constprop.0+0xb2>
 8002bce:	3c37      	subs	r4, #55	; 0x37
 8002bd0:	e7e2      	b.n	8002b98 <_strtol_l.constprop.0+0x78>
 8002bd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8002bd6:	f1be 0f19 	cmp.w	lr, #25
 8002bda:	d804      	bhi.n	8002be6 <_strtol_l.constprop.0+0xc6>
 8002bdc:	3c57      	subs	r4, #87	; 0x57
 8002bde:	e7db      	b.n	8002b98 <_strtol_l.constprop.0+0x78>
 8002be0:	f04f 3cff 	mov.w	ip, #4294967295
 8002be4:	e7e6      	b.n	8002bb4 <_strtol_l.constprop.0+0x94>
 8002be6:	f1bc 0f00 	cmp.w	ip, #0
 8002bea:	da05      	bge.n	8002bf8 <_strtol_l.constprop.0+0xd8>
 8002bec:	2322      	movs	r3, #34	; 0x22
 8002bee:	6003      	str	r3, [r0, #0]
 8002bf0:	4646      	mov	r6, r8
 8002bf2:	b942      	cbnz	r2, 8002c06 <_strtol_l.constprop.0+0xe6>
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	e79e      	b.n	8002b36 <_strtol_l.constprop.0+0x16>
 8002bf8:	b107      	cbz	r7, 8002bfc <_strtol_l.constprop.0+0xdc>
 8002bfa:	4276      	negs	r6, r6
 8002bfc:	2a00      	cmp	r2, #0
 8002bfe:	d0f9      	beq.n	8002bf4 <_strtol_l.constprop.0+0xd4>
 8002c00:	f1bc 0f00 	cmp.w	ip, #0
 8002c04:	d000      	beq.n	8002c08 <_strtol_l.constprop.0+0xe8>
 8002c06:	1e69      	subs	r1, r5, #1
 8002c08:	6011      	str	r1, [r2, #0]
 8002c0a:	e7f3      	b.n	8002bf4 <_strtol_l.constprop.0+0xd4>
 8002c0c:	2430      	movs	r4, #48	; 0x30
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1b1      	bne.n	8002b76 <_strtol_l.constprop.0+0x56>
 8002c12:	2308      	movs	r3, #8
 8002c14:	e7af      	b.n	8002b76 <_strtol_l.constprop.0+0x56>
 8002c16:	2c30      	cmp	r4, #48	; 0x30
 8002c18:	d0a5      	beq.n	8002b66 <_strtol_l.constprop.0+0x46>
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	e7ab      	b.n	8002b76 <_strtol_l.constprop.0+0x56>
 8002c1e:	bf00      	nop
 8002c20:	08003511 	.word	0x08003511

08002c24 <strtol>:
 8002c24:	4613      	mov	r3, r2
 8002c26:	460a      	mov	r2, r1
 8002c28:	4601      	mov	r1, r0
 8002c2a:	4802      	ldr	r0, [pc, #8]	; (8002c34 <strtol+0x10>)
 8002c2c:	6800      	ldr	r0, [r0, #0]
 8002c2e:	f7ff bf77 	b.w	8002b20 <_strtol_l.constprop.0>
 8002c32:	bf00      	nop
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <__ssputs_r>:
 8002c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c3c:	688e      	ldr	r6, [r1, #8]
 8002c3e:	429e      	cmp	r6, r3
 8002c40:	4682      	mov	sl, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	4690      	mov	r8, r2
 8002c46:	461f      	mov	r7, r3
 8002c48:	d838      	bhi.n	8002cbc <__ssputs_r+0x84>
 8002c4a:	898a      	ldrh	r2, [r1, #12]
 8002c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c50:	d032      	beq.n	8002cb8 <__ssputs_r+0x80>
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	6909      	ldr	r1, [r1, #16]
 8002c56:	eba5 0901 	sub.w	r9, r5, r1
 8002c5a:	6965      	ldr	r5, [r4, #20]
 8002c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c64:	3301      	adds	r3, #1
 8002c66:	444b      	add	r3, r9
 8002c68:	106d      	asrs	r5, r5, #1
 8002c6a:	429d      	cmp	r5, r3
 8002c6c:	bf38      	it	cc
 8002c6e:	461d      	movcc	r5, r3
 8002c70:	0553      	lsls	r3, r2, #21
 8002c72:	d531      	bpl.n	8002cd8 <__ssputs_r+0xa0>
 8002c74:	4629      	mov	r1, r5
 8002c76:	f000 fb63 	bl	8003340 <_malloc_r>
 8002c7a:	4606      	mov	r6, r0
 8002c7c:	b950      	cbnz	r0, 8002c94 <__ssputs_r+0x5c>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	f8ca 3000 	str.w	r3, [sl]
 8002c84:	89a3      	ldrh	r3, [r4, #12]
 8002c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c8a:	81a3      	strh	r3, [r4, #12]
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c94:	6921      	ldr	r1, [r4, #16]
 8002c96:	464a      	mov	r2, r9
 8002c98:	f000 fabe 	bl	8003218 <memcpy>
 8002c9c:	89a3      	ldrh	r3, [r4, #12]
 8002c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca6:	81a3      	strh	r3, [r4, #12]
 8002ca8:	6126      	str	r6, [r4, #16]
 8002caa:	6165      	str	r5, [r4, #20]
 8002cac:	444e      	add	r6, r9
 8002cae:	eba5 0509 	sub.w	r5, r5, r9
 8002cb2:	6026      	str	r6, [r4, #0]
 8002cb4:	60a5      	str	r5, [r4, #8]
 8002cb6:	463e      	mov	r6, r7
 8002cb8:	42be      	cmp	r6, r7
 8002cba:	d900      	bls.n	8002cbe <__ssputs_r+0x86>
 8002cbc:	463e      	mov	r6, r7
 8002cbe:	6820      	ldr	r0, [r4, #0]
 8002cc0:	4632      	mov	r2, r6
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	f000 fab6 	bl	8003234 <memmove>
 8002cc8:	68a3      	ldr	r3, [r4, #8]
 8002cca:	1b9b      	subs	r3, r3, r6
 8002ccc:	60a3      	str	r3, [r4, #8]
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	4433      	add	r3, r6
 8002cd2:	6023      	str	r3, [r4, #0]
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e7db      	b.n	8002c90 <__ssputs_r+0x58>
 8002cd8:	462a      	mov	r2, r5
 8002cda:	f000 fba5 	bl	8003428 <_realloc_r>
 8002cde:	4606      	mov	r6, r0
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	d1e1      	bne.n	8002ca8 <__ssputs_r+0x70>
 8002ce4:	6921      	ldr	r1, [r4, #16]
 8002ce6:	4650      	mov	r0, sl
 8002ce8:	f000 fabe 	bl	8003268 <_free_r>
 8002cec:	e7c7      	b.n	8002c7e <__ssputs_r+0x46>
	...

08002cf0 <_svfiprintf_r>:
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	898b      	ldrh	r3, [r1, #12]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	b09d      	sub	sp, #116	; 0x74
 8002cfc:	4607      	mov	r7, r0
 8002cfe:	460d      	mov	r5, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	d50e      	bpl.n	8002d22 <_svfiprintf_r+0x32>
 8002d04:	690b      	ldr	r3, [r1, #16]
 8002d06:	b963      	cbnz	r3, 8002d22 <_svfiprintf_r+0x32>
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	f000 fb19 	bl	8003340 <_malloc_r>
 8002d0e:	6028      	str	r0, [r5, #0]
 8002d10:	6128      	str	r0, [r5, #16]
 8002d12:	b920      	cbnz	r0, 8002d1e <_svfiprintf_r+0x2e>
 8002d14:	230c      	movs	r3, #12
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	e0d1      	b.n	8002ec2 <_svfiprintf_r+0x1d2>
 8002d1e:	2340      	movs	r3, #64	; 0x40
 8002d20:	616b      	str	r3, [r5, #20]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9309      	str	r3, [sp, #36]	; 0x24
 8002d26:	2320      	movs	r3, #32
 8002d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d30:	2330      	movs	r3, #48	; 0x30
 8002d32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002edc <_svfiprintf_r+0x1ec>
 8002d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d3a:	f04f 0901 	mov.w	r9, #1
 8002d3e:	4623      	mov	r3, r4
 8002d40:	469a      	mov	sl, r3
 8002d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d46:	b10a      	cbz	r2, 8002d4c <_svfiprintf_r+0x5c>
 8002d48:	2a25      	cmp	r2, #37	; 0x25
 8002d4a:	d1f9      	bne.n	8002d40 <_svfiprintf_r+0x50>
 8002d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d50:	d00b      	beq.n	8002d6a <_svfiprintf_r+0x7a>
 8002d52:	465b      	mov	r3, fp
 8002d54:	4622      	mov	r2, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	4638      	mov	r0, r7
 8002d5a:	f7ff ff6d 	bl	8002c38 <__ssputs_r>
 8002d5e:	3001      	adds	r0, #1
 8002d60:	f000 80aa 	beq.w	8002eb8 <_svfiprintf_r+0x1c8>
 8002d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d66:	445a      	add	r2, fp
 8002d68:	9209      	str	r2, [sp, #36]	; 0x24
 8002d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80a2 	beq.w	8002eb8 <_svfiprintf_r+0x1c8>
 8002d74:	2300      	movs	r3, #0
 8002d76:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d7e:	f10a 0a01 	add.w	sl, sl, #1
 8002d82:	9304      	str	r3, [sp, #16]
 8002d84:	9307      	str	r3, [sp, #28]
 8002d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8002d8c:	4654      	mov	r4, sl
 8002d8e:	2205      	movs	r2, #5
 8002d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d94:	4851      	ldr	r0, [pc, #324]	; (8002edc <_svfiprintf_r+0x1ec>)
 8002d96:	f7fd fa23 	bl	80001e0 <memchr>
 8002d9a:	9a04      	ldr	r2, [sp, #16]
 8002d9c:	b9d8      	cbnz	r0, 8002dd6 <_svfiprintf_r+0xe6>
 8002d9e:	06d0      	lsls	r0, r2, #27
 8002da0:	bf44      	itt	mi
 8002da2:	2320      	movmi	r3, #32
 8002da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002da8:	0711      	lsls	r1, r2, #28
 8002daa:	bf44      	itt	mi
 8002dac:	232b      	movmi	r3, #43	; 0x2b
 8002dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002db2:	f89a 3000 	ldrb.w	r3, [sl]
 8002db6:	2b2a      	cmp	r3, #42	; 0x2a
 8002db8:	d015      	beq.n	8002de6 <_svfiprintf_r+0xf6>
 8002dba:	9a07      	ldr	r2, [sp, #28]
 8002dbc:	4654      	mov	r4, sl
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f04f 0c0a 	mov.w	ip, #10
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dca:	3b30      	subs	r3, #48	; 0x30
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d94e      	bls.n	8002e6e <_svfiprintf_r+0x17e>
 8002dd0:	b1b0      	cbz	r0, 8002e00 <_svfiprintf_r+0x110>
 8002dd2:	9207      	str	r2, [sp, #28]
 8002dd4:	e014      	b.n	8002e00 <_svfiprintf_r+0x110>
 8002dd6:	eba0 0308 	sub.w	r3, r0, r8
 8002dda:	fa09 f303 	lsl.w	r3, r9, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	9304      	str	r3, [sp, #16]
 8002de2:	46a2      	mov	sl, r4
 8002de4:	e7d2      	b.n	8002d8c <_svfiprintf_r+0x9c>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	1d19      	adds	r1, r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	9103      	str	r1, [sp, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bfbb      	ittet	lt
 8002df2:	425b      	neglt	r3, r3
 8002df4:	f042 0202 	orrlt.w	r2, r2, #2
 8002df8:	9307      	strge	r3, [sp, #28]
 8002dfa:	9307      	strlt	r3, [sp, #28]
 8002dfc:	bfb8      	it	lt
 8002dfe:	9204      	strlt	r2, [sp, #16]
 8002e00:	7823      	ldrb	r3, [r4, #0]
 8002e02:	2b2e      	cmp	r3, #46	; 0x2e
 8002e04:	d10c      	bne.n	8002e20 <_svfiprintf_r+0x130>
 8002e06:	7863      	ldrb	r3, [r4, #1]
 8002e08:	2b2a      	cmp	r3, #42	; 0x2a
 8002e0a:	d135      	bne.n	8002e78 <_svfiprintf_r+0x188>
 8002e0c:	9b03      	ldr	r3, [sp, #12]
 8002e0e:	1d1a      	adds	r2, r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	9203      	str	r2, [sp, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bfb8      	it	lt
 8002e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e1c:	3402      	adds	r4, #2
 8002e1e:	9305      	str	r3, [sp, #20]
 8002e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002eec <_svfiprintf_r+0x1fc>
 8002e24:	7821      	ldrb	r1, [r4, #0]
 8002e26:	2203      	movs	r2, #3
 8002e28:	4650      	mov	r0, sl
 8002e2a:	f7fd f9d9 	bl	80001e0 <memchr>
 8002e2e:	b140      	cbz	r0, 8002e42 <_svfiprintf_r+0x152>
 8002e30:	2340      	movs	r3, #64	; 0x40
 8002e32:	eba0 000a 	sub.w	r0, r0, sl
 8002e36:	fa03 f000 	lsl.w	r0, r3, r0
 8002e3a:	9b04      	ldr	r3, [sp, #16]
 8002e3c:	4303      	orrs	r3, r0
 8002e3e:	3401      	adds	r4, #1
 8002e40:	9304      	str	r3, [sp, #16]
 8002e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e46:	4826      	ldr	r0, [pc, #152]	; (8002ee0 <_svfiprintf_r+0x1f0>)
 8002e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e4c:	2206      	movs	r2, #6
 8002e4e:	f7fd f9c7 	bl	80001e0 <memchr>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d038      	beq.n	8002ec8 <_svfiprintf_r+0x1d8>
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <_svfiprintf_r+0x1f4>)
 8002e58:	bb1b      	cbnz	r3, 8002ea2 <_svfiprintf_r+0x1b2>
 8002e5a:	9b03      	ldr	r3, [sp, #12]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	f023 0307 	bic.w	r3, r3, #7
 8002e62:	3308      	adds	r3, #8
 8002e64:	9303      	str	r3, [sp, #12]
 8002e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e68:	4433      	add	r3, r6
 8002e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6c:	e767      	b.n	8002d3e <_svfiprintf_r+0x4e>
 8002e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e72:	460c      	mov	r4, r1
 8002e74:	2001      	movs	r0, #1
 8002e76:	e7a5      	b.n	8002dc4 <_svfiprintf_r+0xd4>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	9305      	str	r3, [sp, #20]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f04f 0c0a 	mov.w	ip, #10
 8002e84:	4620      	mov	r0, r4
 8002e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e8a:	3a30      	subs	r2, #48	; 0x30
 8002e8c:	2a09      	cmp	r2, #9
 8002e8e:	d903      	bls.n	8002e98 <_svfiprintf_r+0x1a8>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0c5      	beq.n	8002e20 <_svfiprintf_r+0x130>
 8002e94:	9105      	str	r1, [sp, #20]
 8002e96:	e7c3      	b.n	8002e20 <_svfiprintf_r+0x130>
 8002e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e7f0      	b.n	8002e84 <_svfiprintf_r+0x194>
 8002ea2:	ab03      	add	r3, sp, #12
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	462a      	mov	r2, r5
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <_svfiprintf_r+0x1f8>)
 8002eaa:	a904      	add	r1, sp, #16
 8002eac:	4638      	mov	r0, r7
 8002eae:	f3af 8000 	nop.w
 8002eb2:	1c42      	adds	r2, r0, #1
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	d1d6      	bne.n	8002e66 <_svfiprintf_r+0x176>
 8002eb8:	89ab      	ldrh	r3, [r5, #12]
 8002eba:	065b      	lsls	r3, r3, #25
 8002ebc:	f53f af2c 	bmi.w	8002d18 <_svfiprintf_r+0x28>
 8002ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ec2:	b01d      	add	sp, #116	; 0x74
 8002ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec8:	ab03      	add	r3, sp, #12
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	462a      	mov	r2, r5
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <_svfiprintf_r+0x1f8>)
 8002ed0:	a904      	add	r1, sp, #16
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	f000 f87a 	bl	8002fcc <_printf_i>
 8002ed8:	e7eb      	b.n	8002eb2 <_svfiprintf_r+0x1c2>
 8002eda:	bf00      	nop
 8002edc:	08003611 	.word	0x08003611
 8002ee0:	0800361b 	.word	0x0800361b
 8002ee4:	00000000 	.word	0x00000000
 8002ee8:	08002c39 	.word	0x08002c39
 8002eec:	08003617 	.word	0x08003617

08002ef0 <_printf_common>:
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	4699      	mov	r9, r3
 8002ef8:	688a      	ldr	r2, [r1, #8]
 8002efa:	690b      	ldr	r3, [r1, #16]
 8002efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bfb8      	it	lt
 8002f04:	4613      	movlt	r3, r2
 8002f06:	6033      	str	r3, [r6, #0]
 8002f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f0c:	4607      	mov	r7, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	b10a      	cbz	r2, 8002f16 <_printf_common+0x26>
 8002f12:	3301      	adds	r3, #1
 8002f14:	6033      	str	r3, [r6, #0]
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	0699      	lsls	r1, r3, #26
 8002f1a:	bf42      	ittt	mi
 8002f1c:	6833      	ldrmi	r3, [r6, #0]
 8002f1e:	3302      	addmi	r3, #2
 8002f20:	6033      	strmi	r3, [r6, #0]
 8002f22:	6825      	ldr	r5, [r4, #0]
 8002f24:	f015 0506 	ands.w	r5, r5, #6
 8002f28:	d106      	bne.n	8002f38 <_printf_common+0x48>
 8002f2a:	f104 0a19 	add.w	sl, r4, #25
 8002f2e:	68e3      	ldr	r3, [r4, #12]
 8002f30:	6832      	ldr	r2, [r6, #0]
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	dc26      	bgt.n	8002f86 <_printf_common+0x96>
 8002f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f3c:	1e13      	subs	r3, r2, #0
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	bf18      	it	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	0692      	lsls	r2, r2, #26
 8002f46:	d42b      	bmi.n	8002fa0 <_printf_common+0xb0>
 8002f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	4638      	mov	r0, r7
 8002f50:	47c0      	blx	r8
 8002f52:	3001      	adds	r0, #1
 8002f54:	d01e      	beq.n	8002f94 <_printf_common+0xa4>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	68e5      	ldr	r5, [r4, #12]
 8002f5a:	6832      	ldr	r2, [r6, #0]
 8002f5c:	f003 0306 	and.w	r3, r3, #6
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	bf08      	it	eq
 8002f64:	1aad      	subeq	r5, r5, r2
 8002f66:	68a3      	ldr	r3, [r4, #8]
 8002f68:	6922      	ldr	r2, [r4, #16]
 8002f6a:	bf0c      	ite	eq
 8002f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f70:	2500      	movne	r5, #0
 8002f72:	4293      	cmp	r3, r2
 8002f74:	bfc4      	itt	gt
 8002f76:	1a9b      	subgt	r3, r3, r2
 8002f78:	18ed      	addgt	r5, r5, r3
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	341a      	adds	r4, #26
 8002f7e:	42b5      	cmp	r5, r6
 8002f80:	d11a      	bne.n	8002fb8 <_printf_common+0xc8>
 8002f82:	2000      	movs	r0, #0
 8002f84:	e008      	b.n	8002f98 <_printf_common+0xa8>
 8002f86:	2301      	movs	r3, #1
 8002f88:	4652      	mov	r2, sl
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	47c0      	blx	r8
 8002f90:	3001      	adds	r0, #1
 8002f92:	d103      	bne.n	8002f9c <_printf_common+0xac>
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f9c:	3501      	adds	r5, #1
 8002f9e:	e7c6      	b.n	8002f2e <_printf_common+0x3e>
 8002fa0:	18e1      	adds	r1, r4, r3
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	2030      	movs	r0, #48	; 0x30
 8002fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002faa:	4422      	add	r2, r4
 8002fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	e7c7      	b.n	8002f48 <_printf_common+0x58>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4622      	mov	r2, r4
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	4638      	mov	r0, r7
 8002fc0:	47c0      	blx	r8
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	d0e6      	beq.n	8002f94 <_printf_common+0xa4>
 8002fc6:	3601      	adds	r6, #1
 8002fc8:	e7d9      	b.n	8002f7e <_printf_common+0x8e>
	...

08002fcc <_printf_i>:
 8002fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	7e0f      	ldrb	r7, [r1, #24]
 8002fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fd4:	2f78      	cmp	r7, #120	; 0x78
 8002fd6:	4691      	mov	r9, r2
 8002fd8:	4680      	mov	r8, r0
 8002fda:	460c      	mov	r4, r1
 8002fdc:	469a      	mov	sl, r3
 8002fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fe2:	d807      	bhi.n	8002ff4 <_printf_i+0x28>
 8002fe4:	2f62      	cmp	r7, #98	; 0x62
 8002fe6:	d80a      	bhi.n	8002ffe <_printf_i+0x32>
 8002fe8:	2f00      	cmp	r7, #0
 8002fea:	f000 80d8 	beq.w	800319e <_printf_i+0x1d2>
 8002fee:	2f58      	cmp	r7, #88	; 0x58
 8002ff0:	f000 80a3 	beq.w	800313a <_printf_i+0x16e>
 8002ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ffc:	e03a      	b.n	8003074 <_printf_i+0xa8>
 8002ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003002:	2b15      	cmp	r3, #21
 8003004:	d8f6      	bhi.n	8002ff4 <_printf_i+0x28>
 8003006:	a101      	add	r1, pc, #4	; (adr r1, 800300c <_printf_i+0x40>)
 8003008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800300c:	08003065 	.word	0x08003065
 8003010:	08003079 	.word	0x08003079
 8003014:	08002ff5 	.word	0x08002ff5
 8003018:	08002ff5 	.word	0x08002ff5
 800301c:	08002ff5 	.word	0x08002ff5
 8003020:	08002ff5 	.word	0x08002ff5
 8003024:	08003079 	.word	0x08003079
 8003028:	08002ff5 	.word	0x08002ff5
 800302c:	08002ff5 	.word	0x08002ff5
 8003030:	08002ff5 	.word	0x08002ff5
 8003034:	08002ff5 	.word	0x08002ff5
 8003038:	08003185 	.word	0x08003185
 800303c:	080030a9 	.word	0x080030a9
 8003040:	08003167 	.word	0x08003167
 8003044:	08002ff5 	.word	0x08002ff5
 8003048:	08002ff5 	.word	0x08002ff5
 800304c:	080031a7 	.word	0x080031a7
 8003050:	08002ff5 	.word	0x08002ff5
 8003054:	080030a9 	.word	0x080030a9
 8003058:	08002ff5 	.word	0x08002ff5
 800305c:	08002ff5 	.word	0x08002ff5
 8003060:	0800316f 	.word	0x0800316f
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	602a      	str	r2, [r5, #0]
 800306c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003074:	2301      	movs	r3, #1
 8003076:	e0a3      	b.n	80031c0 <_printf_i+0x1f4>
 8003078:	6820      	ldr	r0, [r4, #0]
 800307a:	6829      	ldr	r1, [r5, #0]
 800307c:	0606      	lsls	r6, r0, #24
 800307e:	f101 0304 	add.w	r3, r1, #4
 8003082:	d50a      	bpl.n	800309a <_printf_i+0xce>
 8003084:	680e      	ldr	r6, [r1, #0]
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	2e00      	cmp	r6, #0
 800308a:	da03      	bge.n	8003094 <_printf_i+0xc8>
 800308c:	232d      	movs	r3, #45	; 0x2d
 800308e:	4276      	negs	r6, r6
 8003090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003094:	485e      	ldr	r0, [pc, #376]	; (8003210 <_printf_i+0x244>)
 8003096:	230a      	movs	r3, #10
 8003098:	e019      	b.n	80030ce <_printf_i+0x102>
 800309a:	680e      	ldr	r6, [r1, #0]
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030a2:	bf18      	it	ne
 80030a4:	b236      	sxthne	r6, r6
 80030a6:	e7ef      	b.n	8003088 <_printf_i+0xbc>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	6820      	ldr	r0, [r4, #0]
 80030ac:	1d19      	adds	r1, r3, #4
 80030ae:	6029      	str	r1, [r5, #0]
 80030b0:	0601      	lsls	r1, r0, #24
 80030b2:	d501      	bpl.n	80030b8 <_printf_i+0xec>
 80030b4:	681e      	ldr	r6, [r3, #0]
 80030b6:	e002      	b.n	80030be <_printf_i+0xf2>
 80030b8:	0646      	lsls	r6, r0, #25
 80030ba:	d5fb      	bpl.n	80030b4 <_printf_i+0xe8>
 80030bc:	881e      	ldrh	r6, [r3, #0]
 80030be:	4854      	ldr	r0, [pc, #336]	; (8003210 <_printf_i+0x244>)
 80030c0:	2f6f      	cmp	r7, #111	; 0x6f
 80030c2:	bf0c      	ite	eq
 80030c4:	2308      	moveq	r3, #8
 80030c6:	230a      	movne	r3, #10
 80030c8:	2100      	movs	r1, #0
 80030ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030ce:	6865      	ldr	r5, [r4, #4]
 80030d0:	60a5      	str	r5, [r4, #8]
 80030d2:	2d00      	cmp	r5, #0
 80030d4:	bfa2      	ittt	ge
 80030d6:	6821      	ldrge	r1, [r4, #0]
 80030d8:	f021 0104 	bicge.w	r1, r1, #4
 80030dc:	6021      	strge	r1, [r4, #0]
 80030de:	b90e      	cbnz	r6, 80030e4 <_printf_i+0x118>
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	d04d      	beq.n	8003180 <_printf_i+0x1b4>
 80030e4:	4615      	mov	r5, r2
 80030e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80030ea:	fb03 6711 	mls	r7, r3, r1, r6
 80030ee:	5dc7      	ldrb	r7, [r0, r7]
 80030f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030f4:	4637      	mov	r7, r6
 80030f6:	42bb      	cmp	r3, r7
 80030f8:	460e      	mov	r6, r1
 80030fa:	d9f4      	bls.n	80030e6 <_printf_i+0x11a>
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d10b      	bne.n	8003118 <_printf_i+0x14c>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	07de      	lsls	r6, r3, #31
 8003104:	d508      	bpl.n	8003118 <_printf_i+0x14c>
 8003106:	6923      	ldr	r3, [r4, #16]
 8003108:	6861      	ldr	r1, [r4, #4]
 800310a:	4299      	cmp	r1, r3
 800310c:	bfde      	ittt	le
 800310e:	2330      	movle	r3, #48	; 0x30
 8003110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003118:	1b52      	subs	r2, r2, r5
 800311a:	6122      	str	r2, [r4, #16]
 800311c:	f8cd a000 	str.w	sl, [sp]
 8003120:	464b      	mov	r3, r9
 8003122:	aa03      	add	r2, sp, #12
 8003124:	4621      	mov	r1, r4
 8003126:	4640      	mov	r0, r8
 8003128:	f7ff fee2 	bl	8002ef0 <_printf_common>
 800312c:	3001      	adds	r0, #1
 800312e:	d14c      	bne.n	80031ca <_printf_i+0x1fe>
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	b004      	add	sp, #16
 8003136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313a:	4835      	ldr	r0, [pc, #212]	; (8003210 <_printf_i+0x244>)
 800313c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003140:	6829      	ldr	r1, [r5, #0]
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	f851 6b04 	ldr.w	r6, [r1], #4
 8003148:	6029      	str	r1, [r5, #0]
 800314a:	061d      	lsls	r5, r3, #24
 800314c:	d514      	bpl.n	8003178 <_printf_i+0x1ac>
 800314e:	07df      	lsls	r7, r3, #31
 8003150:	bf44      	itt	mi
 8003152:	f043 0320 	orrmi.w	r3, r3, #32
 8003156:	6023      	strmi	r3, [r4, #0]
 8003158:	b91e      	cbnz	r6, 8003162 <_printf_i+0x196>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	f023 0320 	bic.w	r3, r3, #32
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	2310      	movs	r3, #16
 8003164:	e7b0      	b.n	80030c8 <_printf_i+0xfc>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	2378      	movs	r3, #120	; 0x78
 8003170:	4828      	ldr	r0, [pc, #160]	; (8003214 <_printf_i+0x248>)
 8003172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003176:	e7e3      	b.n	8003140 <_printf_i+0x174>
 8003178:	0659      	lsls	r1, r3, #25
 800317a:	bf48      	it	mi
 800317c:	b2b6      	uxthmi	r6, r6
 800317e:	e7e6      	b.n	800314e <_printf_i+0x182>
 8003180:	4615      	mov	r5, r2
 8003182:	e7bb      	b.n	80030fc <_printf_i+0x130>
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	6826      	ldr	r6, [r4, #0]
 8003188:	6961      	ldr	r1, [r4, #20]
 800318a:	1d18      	adds	r0, r3, #4
 800318c:	6028      	str	r0, [r5, #0]
 800318e:	0635      	lsls	r5, r6, #24
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	d501      	bpl.n	8003198 <_printf_i+0x1cc>
 8003194:	6019      	str	r1, [r3, #0]
 8003196:	e002      	b.n	800319e <_printf_i+0x1d2>
 8003198:	0670      	lsls	r0, r6, #25
 800319a:	d5fb      	bpl.n	8003194 <_printf_i+0x1c8>
 800319c:	8019      	strh	r1, [r3, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	6123      	str	r3, [r4, #16]
 80031a2:	4615      	mov	r5, r2
 80031a4:	e7ba      	b.n	800311c <_printf_i+0x150>
 80031a6:	682b      	ldr	r3, [r5, #0]
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	602a      	str	r2, [r5, #0]
 80031ac:	681d      	ldr	r5, [r3, #0]
 80031ae:	6862      	ldr	r2, [r4, #4]
 80031b0:	2100      	movs	r1, #0
 80031b2:	4628      	mov	r0, r5
 80031b4:	f7fd f814 	bl	80001e0 <memchr>
 80031b8:	b108      	cbz	r0, 80031be <_printf_i+0x1f2>
 80031ba:	1b40      	subs	r0, r0, r5
 80031bc:	6060      	str	r0, [r4, #4]
 80031be:	6863      	ldr	r3, [r4, #4]
 80031c0:	6123      	str	r3, [r4, #16]
 80031c2:	2300      	movs	r3, #0
 80031c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c8:	e7a8      	b.n	800311c <_printf_i+0x150>
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	462a      	mov	r2, r5
 80031ce:	4649      	mov	r1, r9
 80031d0:	4640      	mov	r0, r8
 80031d2:	47d0      	blx	sl
 80031d4:	3001      	adds	r0, #1
 80031d6:	d0ab      	beq.n	8003130 <_printf_i+0x164>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	079b      	lsls	r3, r3, #30
 80031dc:	d413      	bmi.n	8003206 <_printf_i+0x23a>
 80031de:	68e0      	ldr	r0, [r4, #12]
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	4298      	cmp	r0, r3
 80031e4:	bfb8      	it	lt
 80031e6:	4618      	movlt	r0, r3
 80031e8:	e7a4      	b.n	8003134 <_printf_i+0x168>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4632      	mov	r2, r6
 80031ee:	4649      	mov	r1, r9
 80031f0:	4640      	mov	r0, r8
 80031f2:	47d0      	blx	sl
 80031f4:	3001      	adds	r0, #1
 80031f6:	d09b      	beq.n	8003130 <_printf_i+0x164>
 80031f8:	3501      	adds	r5, #1
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	9903      	ldr	r1, [sp, #12]
 80031fe:	1a5b      	subs	r3, r3, r1
 8003200:	42ab      	cmp	r3, r5
 8003202:	dcf2      	bgt.n	80031ea <_printf_i+0x21e>
 8003204:	e7eb      	b.n	80031de <_printf_i+0x212>
 8003206:	2500      	movs	r5, #0
 8003208:	f104 0619 	add.w	r6, r4, #25
 800320c:	e7f5      	b.n	80031fa <_printf_i+0x22e>
 800320e:	bf00      	nop
 8003210:	08003622 	.word	0x08003622
 8003214:	08003633 	.word	0x08003633

08003218 <memcpy>:
 8003218:	440a      	add	r2, r1
 800321a:	4291      	cmp	r1, r2
 800321c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003220:	d100      	bne.n	8003224 <memcpy+0xc>
 8003222:	4770      	bx	lr
 8003224:	b510      	push	{r4, lr}
 8003226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800322a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800322e:	4291      	cmp	r1, r2
 8003230:	d1f9      	bne.n	8003226 <memcpy+0xe>
 8003232:	bd10      	pop	{r4, pc}

08003234 <memmove>:
 8003234:	4288      	cmp	r0, r1
 8003236:	b510      	push	{r4, lr}
 8003238:	eb01 0402 	add.w	r4, r1, r2
 800323c:	d902      	bls.n	8003244 <memmove+0x10>
 800323e:	4284      	cmp	r4, r0
 8003240:	4623      	mov	r3, r4
 8003242:	d807      	bhi.n	8003254 <memmove+0x20>
 8003244:	1e43      	subs	r3, r0, #1
 8003246:	42a1      	cmp	r1, r4
 8003248:	d008      	beq.n	800325c <memmove+0x28>
 800324a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800324e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003252:	e7f8      	b.n	8003246 <memmove+0x12>
 8003254:	4402      	add	r2, r0
 8003256:	4601      	mov	r1, r0
 8003258:	428a      	cmp	r2, r1
 800325a:	d100      	bne.n	800325e <memmove+0x2a>
 800325c:	bd10      	pop	{r4, pc}
 800325e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003266:	e7f7      	b.n	8003258 <memmove+0x24>

08003268 <_free_r>:
 8003268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800326a:	2900      	cmp	r1, #0
 800326c:	d044      	beq.n	80032f8 <_free_r+0x90>
 800326e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003272:	9001      	str	r0, [sp, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f1a1 0404 	sub.w	r4, r1, #4
 800327a:	bfb8      	it	lt
 800327c:	18e4      	addlt	r4, r4, r3
 800327e:	f000 f913 	bl	80034a8 <__malloc_lock>
 8003282:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <_free_r+0x94>)
 8003284:	9801      	ldr	r0, [sp, #4]
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	b933      	cbnz	r3, 8003298 <_free_r+0x30>
 800328a:	6063      	str	r3, [r4, #4]
 800328c:	6014      	str	r4, [r2, #0]
 800328e:	b003      	add	sp, #12
 8003290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003294:	f000 b90e 	b.w	80034b4 <__malloc_unlock>
 8003298:	42a3      	cmp	r3, r4
 800329a:	d908      	bls.n	80032ae <_free_r+0x46>
 800329c:	6825      	ldr	r5, [r4, #0]
 800329e:	1961      	adds	r1, r4, r5
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf01      	itttt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	1949      	addeq	r1, r1, r5
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	e7ed      	b.n	800328a <_free_r+0x22>
 80032ae:	461a      	mov	r2, r3
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b10b      	cbz	r3, 80032b8 <_free_r+0x50>
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	d9fa      	bls.n	80032ae <_free_r+0x46>
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	1855      	adds	r5, r2, r1
 80032bc:	42a5      	cmp	r5, r4
 80032be:	d10b      	bne.n	80032d8 <_free_r+0x70>
 80032c0:	6824      	ldr	r4, [r4, #0]
 80032c2:	4421      	add	r1, r4
 80032c4:	1854      	adds	r4, r2, r1
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	d1e0      	bne.n	800328e <_free_r+0x26>
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	6053      	str	r3, [r2, #4]
 80032d2:	4421      	add	r1, r4
 80032d4:	6011      	str	r1, [r2, #0]
 80032d6:	e7da      	b.n	800328e <_free_r+0x26>
 80032d8:	d902      	bls.n	80032e0 <_free_r+0x78>
 80032da:	230c      	movs	r3, #12
 80032dc:	6003      	str	r3, [r0, #0]
 80032de:	e7d6      	b.n	800328e <_free_r+0x26>
 80032e0:	6825      	ldr	r5, [r4, #0]
 80032e2:	1961      	adds	r1, r4, r5
 80032e4:	428b      	cmp	r3, r1
 80032e6:	bf04      	itt	eq
 80032e8:	6819      	ldreq	r1, [r3, #0]
 80032ea:	685b      	ldreq	r3, [r3, #4]
 80032ec:	6063      	str	r3, [r4, #4]
 80032ee:	bf04      	itt	eq
 80032f0:	1949      	addeq	r1, r1, r5
 80032f2:	6021      	streq	r1, [r4, #0]
 80032f4:	6054      	str	r4, [r2, #4]
 80032f6:	e7ca      	b.n	800328e <_free_r+0x26>
 80032f8:	b003      	add	sp, #12
 80032fa:	bd30      	pop	{r4, r5, pc}
 80032fc:	200000e0 	.word	0x200000e0

08003300 <sbrk_aligned>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	4e0e      	ldr	r6, [pc, #56]	; (800333c <sbrk_aligned+0x3c>)
 8003304:	460c      	mov	r4, r1
 8003306:	6831      	ldr	r1, [r6, #0]
 8003308:	4605      	mov	r5, r0
 800330a:	b911      	cbnz	r1, 8003312 <sbrk_aligned+0x12>
 800330c:	f000 f8bc 	bl	8003488 <_sbrk_r>
 8003310:	6030      	str	r0, [r6, #0]
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 f8b7 	bl	8003488 <_sbrk_r>
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	d00a      	beq.n	8003334 <sbrk_aligned+0x34>
 800331e:	1cc4      	adds	r4, r0, #3
 8003320:	f024 0403 	bic.w	r4, r4, #3
 8003324:	42a0      	cmp	r0, r4
 8003326:	d007      	beq.n	8003338 <sbrk_aligned+0x38>
 8003328:	1a21      	subs	r1, r4, r0
 800332a:	4628      	mov	r0, r5
 800332c:	f000 f8ac 	bl	8003488 <_sbrk_r>
 8003330:	3001      	adds	r0, #1
 8003332:	d101      	bne.n	8003338 <sbrk_aligned+0x38>
 8003334:	f04f 34ff 	mov.w	r4, #4294967295
 8003338:	4620      	mov	r0, r4
 800333a:	bd70      	pop	{r4, r5, r6, pc}
 800333c:	200000e4 	.word	0x200000e4

08003340 <_malloc_r>:
 8003340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003344:	1ccd      	adds	r5, r1, #3
 8003346:	f025 0503 	bic.w	r5, r5, #3
 800334a:	3508      	adds	r5, #8
 800334c:	2d0c      	cmp	r5, #12
 800334e:	bf38      	it	cc
 8003350:	250c      	movcc	r5, #12
 8003352:	2d00      	cmp	r5, #0
 8003354:	4607      	mov	r7, r0
 8003356:	db01      	blt.n	800335c <_malloc_r+0x1c>
 8003358:	42a9      	cmp	r1, r5
 800335a:	d905      	bls.n	8003368 <_malloc_r+0x28>
 800335c:	230c      	movs	r3, #12
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	2600      	movs	r6, #0
 8003362:	4630      	mov	r0, r6
 8003364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003368:	4e2e      	ldr	r6, [pc, #184]	; (8003424 <_malloc_r+0xe4>)
 800336a:	f000 f89d 	bl	80034a8 <__malloc_lock>
 800336e:	6833      	ldr	r3, [r6, #0]
 8003370:	461c      	mov	r4, r3
 8003372:	bb34      	cbnz	r4, 80033c2 <_malloc_r+0x82>
 8003374:	4629      	mov	r1, r5
 8003376:	4638      	mov	r0, r7
 8003378:	f7ff ffc2 	bl	8003300 <sbrk_aligned>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	4604      	mov	r4, r0
 8003380:	d14d      	bne.n	800341e <_malloc_r+0xde>
 8003382:	6834      	ldr	r4, [r6, #0]
 8003384:	4626      	mov	r6, r4
 8003386:	2e00      	cmp	r6, #0
 8003388:	d140      	bne.n	800340c <_malloc_r+0xcc>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	4631      	mov	r1, r6
 800338e:	4638      	mov	r0, r7
 8003390:	eb04 0803 	add.w	r8, r4, r3
 8003394:	f000 f878 	bl	8003488 <_sbrk_r>
 8003398:	4580      	cmp	r8, r0
 800339a:	d13a      	bne.n	8003412 <_malloc_r+0xd2>
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	3503      	adds	r5, #3
 80033a0:	1a6d      	subs	r5, r5, r1
 80033a2:	f025 0503 	bic.w	r5, r5, #3
 80033a6:	3508      	adds	r5, #8
 80033a8:	2d0c      	cmp	r5, #12
 80033aa:	bf38      	it	cc
 80033ac:	250c      	movcc	r5, #12
 80033ae:	4629      	mov	r1, r5
 80033b0:	4638      	mov	r0, r7
 80033b2:	f7ff ffa5 	bl	8003300 <sbrk_aligned>
 80033b6:	3001      	adds	r0, #1
 80033b8:	d02b      	beq.n	8003412 <_malloc_r+0xd2>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	442b      	add	r3, r5
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	e00e      	b.n	80033e0 <_malloc_r+0xa0>
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	1b52      	subs	r2, r2, r5
 80033c6:	d41e      	bmi.n	8003406 <_malloc_r+0xc6>
 80033c8:	2a0b      	cmp	r2, #11
 80033ca:	d916      	bls.n	80033fa <_malloc_r+0xba>
 80033cc:	1961      	adds	r1, r4, r5
 80033ce:	42a3      	cmp	r3, r4
 80033d0:	6025      	str	r5, [r4, #0]
 80033d2:	bf18      	it	ne
 80033d4:	6059      	strne	r1, [r3, #4]
 80033d6:	6863      	ldr	r3, [r4, #4]
 80033d8:	bf08      	it	eq
 80033da:	6031      	streq	r1, [r6, #0]
 80033dc:	5162      	str	r2, [r4, r5]
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	4638      	mov	r0, r7
 80033e2:	f104 060b 	add.w	r6, r4, #11
 80033e6:	f000 f865 	bl	80034b4 <__malloc_unlock>
 80033ea:	f026 0607 	bic.w	r6, r6, #7
 80033ee:	1d23      	adds	r3, r4, #4
 80033f0:	1af2      	subs	r2, r6, r3
 80033f2:	d0b6      	beq.n	8003362 <_malloc_r+0x22>
 80033f4:	1b9b      	subs	r3, r3, r6
 80033f6:	50a3      	str	r3, [r4, r2]
 80033f8:	e7b3      	b.n	8003362 <_malloc_r+0x22>
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	bf0c      	ite	eq
 8003400:	6032      	streq	r2, [r6, #0]
 8003402:	605a      	strne	r2, [r3, #4]
 8003404:	e7ec      	b.n	80033e0 <_malloc_r+0xa0>
 8003406:	4623      	mov	r3, r4
 8003408:	6864      	ldr	r4, [r4, #4]
 800340a:	e7b2      	b.n	8003372 <_malloc_r+0x32>
 800340c:	4634      	mov	r4, r6
 800340e:	6876      	ldr	r6, [r6, #4]
 8003410:	e7b9      	b.n	8003386 <_malloc_r+0x46>
 8003412:	230c      	movs	r3, #12
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	4638      	mov	r0, r7
 8003418:	f000 f84c 	bl	80034b4 <__malloc_unlock>
 800341c:	e7a1      	b.n	8003362 <_malloc_r+0x22>
 800341e:	6025      	str	r5, [r4, #0]
 8003420:	e7de      	b.n	80033e0 <_malloc_r+0xa0>
 8003422:	bf00      	nop
 8003424:	200000e0 	.word	0x200000e0

08003428 <_realloc_r>:
 8003428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342c:	4680      	mov	r8, r0
 800342e:	4614      	mov	r4, r2
 8003430:	460e      	mov	r6, r1
 8003432:	b921      	cbnz	r1, 800343e <_realloc_r+0x16>
 8003434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003438:	4611      	mov	r1, r2
 800343a:	f7ff bf81 	b.w	8003340 <_malloc_r>
 800343e:	b92a      	cbnz	r2, 800344c <_realloc_r+0x24>
 8003440:	f7ff ff12 	bl	8003268 <_free_r>
 8003444:	4625      	mov	r5, r4
 8003446:	4628      	mov	r0, r5
 8003448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800344c:	f000 f838 	bl	80034c0 <_malloc_usable_size_r>
 8003450:	4284      	cmp	r4, r0
 8003452:	4607      	mov	r7, r0
 8003454:	d802      	bhi.n	800345c <_realloc_r+0x34>
 8003456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800345a:	d812      	bhi.n	8003482 <_realloc_r+0x5a>
 800345c:	4621      	mov	r1, r4
 800345e:	4640      	mov	r0, r8
 8003460:	f7ff ff6e 	bl	8003340 <_malloc_r>
 8003464:	4605      	mov	r5, r0
 8003466:	2800      	cmp	r0, #0
 8003468:	d0ed      	beq.n	8003446 <_realloc_r+0x1e>
 800346a:	42bc      	cmp	r4, r7
 800346c:	4622      	mov	r2, r4
 800346e:	4631      	mov	r1, r6
 8003470:	bf28      	it	cs
 8003472:	463a      	movcs	r2, r7
 8003474:	f7ff fed0 	bl	8003218 <memcpy>
 8003478:	4631      	mov	r1, r6
 800347a:	4640      	mov	r0, r8
 800347c:	f7ff fef4 	bl	8003268 <_free_r>
 8003480:	e7e1      	b.n	8003446 <_realloc_r+0x1e>
 8003482:	4635      	mov	r5, r6
 8003484:	e7df      	b.n	8003446 <_realloc_r+0x1e>
	...

08003488 <_sbrk_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4d06      	ldr	r5, [pc, #24]	; (80034a4 <_sbrk_r+0x1c>)
 800348c:	2300      	movs	r3, #0
 800348e:	4604      	mov	r4, r0
 8003490:	4608      	mov	r0, r1
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	f7fd fa7e 	bl	8000994 <_sbrk>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_sbrk_r+0x1a>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_sbrk_r+0x1a>
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	200000e8 	.word	0x200000e8

080034a8 <__malloc_lock>:
 80034a8:	4801      	ldr	r0, [pc, #4]	; (80034b0 <__malloc_lock+0x8>)
 80034aa:	f000 b811 	b.w	80034d0 <__retarget_lock_acquire_recursive>
 80034ae:	bf00      	nop
 80034b0:	200000ec 	.word	0x200000ec

080034b4 <__malloc_unlock>:
 80034b4:	4801      	ldr	r0, [pc, #4]	; (80034bc <__malloc_unlock+0x8>)
 80034b6:	f000 b80c 	b.w	80034d2 <__retarget_lock_release_recursive>
 80034ba:	bf00      	nop
 80034bc:	200000ec 	.word	0x200000ec

080034c0 <_malloc_usable_size_r>:
 80034c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034c4:	1f18      	subs	r0, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bfbc      	itt	lt
 80034ca:	580b      	ldrlt	r3, [r1, r0]
 80034cc:	18c0      	addlt	r0, r0, r3
 80034ce:	4770      	bx	lr

080034d0 <__retarget_lock_acquire_recursive>:
 80034d0:	4770      	bx	lr

080034d2 <__retarget_lock_release_recursive>:
 80034d2:	4770      	bx	lr

080034d4 <_init>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	bf00      	nop
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr

080034e0 <_fini>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	bf00      	nop
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr
